{
module internal JsonLexer

open System
open System.Text

// Opens methods related to fslex.exe
open Microsoft.FSharp.Text.Lexing

let lexeme = LexBuffer<char>.LexemeString

let newline (lexbuf: LexBuffer<_>) = 
    lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let hex_digit = ['0'-'9' 'A'-'F' 'a'-'f']
let json_bool = ("true" | "false")
let json_null = "null"
let json_char = ("\\\"" | "\\\\" | "\\/" | "\\b" | "\\f" | "\\n" | "\\r" | "\\t" | ('\\' 'u' hex_digit hex_digit hex_digit hex_digit) | [^'"' '\\'])
let json_string = '"' json_char* '"'
let json_digit19 = ['1'-'9']
let json_digit = ['0'-'9']
let json_int = (json_digit | '-'? json_digit19 json_digit*)
let json_frac = '.' json_digit+
let json_e = ['e' 'E']
let json_plusminus = ['+' '-']
let json_exp = json_e json_plusminus? json_digit+
let json_float = json_int (json_frac | json_exp | (json_frac json_exp)) 

rule json = parse
// --------------------------
| ":"           { JsonParser.SYM_COLON }
| ","           { JsonParser.SYM_COMMA }
| "["           { JsonParser.SYM_LBRACKET }
| "]"           { JsonParser.SYM_RBRACKET }
| "{"           { JsonParser.SYM_LCURLY }
| "}"           { JsonParser.SYM_RCURLY }
| json_string   { JsonParser.JSON_STRING(let s = lexeme lexbuf in (s.Substring(1, s.Length-2))) }
| json_int      { JsonParser.JSON_INT(lexeme lexbuf) }
| json_float    { JsonParser.JSON_FLOAT(lexeme lexbuf) }
| json_bool     { JsonParser.JSON_BOOL(lexeme lexbuf) }
| json_null     { JsonParser.JSON_NULL(lexeme lexbuf) }
| whitespace+   { json lexbuf }
| newline       { newline lexbuf; json lexbuf }
// --------------------------
| _         { failwith ("ParseError " + LexBuffer<_>.LexemeString lexbuf) }
| eof       { JsonParser.EOF }
