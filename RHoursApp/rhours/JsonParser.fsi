// Signature file for parser generated by fsyacc
module internal JsonParser
type token = 
  | EOF
  | JSON_FLOAT of (string)
  | JSON_INT of (string)
  | JSON_STRING of (string)
  | JSON_NULL of (string)
  | JSON_BOOL of (string)
  | ID of (string)
  | SYM_COMMA
  | SYM_LBRACKET
  | SYM_RBRACKET
  | SYM_LCURLY
  | SYM_RCURLY
  | SYM_COLON
type tokenId = 
    | TOKEN_EOF
    | TOKEN_JSON_FLOAT
    | TOKEN_JSON_INT
    | TOKEN_JSON_STRING
    | TOKEN_JSON_NULL
    | TOKEN_JSON_BOOL
    | TOKEN_ID
    | TOKEN_SYM_COMMA
    | TOKEN_SYM_LBRACKET
    | TOKEN_SYM_RBRACKET
    | TOKEN_SYM_LCURLY
    | TOKEN_SYM_RCURLY
    | TOKEN_SYM_COLON
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_JsonValue
    | NONTERM_JsonString
    | NONTERM_JsonNumber
    | NONTERM_JsonObject
    | NONTERM_JsonMembers
    | NONTERM_JsonPair
    | NONTERM_JsonArray
    | NONTERM_JsonElements
    | NONTERM_JsonBool
    | NONTERM_JsonNull
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> ( obj ) 
